Later Phase Ideas:
-gnomes?
-Damage:
	Collide with other gnome:
		deal damage when landing on player's head (ability to also fart on head)
	Farts:
		everything coming out of the ass - all attacks leave from the butt
		farts have duration/expiration
	Types of Fart Attacks:
		SBD - invisible fart that grows in radius and wraps until it hits another player 
			and does damage according to how big that radius is
		attacks: cropdusting, sharts, etc	
		wedgie attack- other player cannot fart for set time
		bubble fart- hold/release/persist
		homing fart
		concussion fart - knocks you down you have to toggle left/right/jump 10 to get back up 
		
	
-Players:
	keeping track of stats: kills, deaths, damage, farts, fart effectiveness, etc.
	
-Powerups:
	Health can increase infinitely
	ability that gives player health upon colliding with fart. 
	slow moving fart mines - they hover 

-Scene:
	Scenery may shift or disappear later in rounds
	Different levels different scenes

PROTOTYPE:
	gravity?
	jumping
	movement
	jumping/landing on platforms
	bullets
	simultaneous multiplayer
	killing people
	3 lives?
	respawn until out of lives, 
	last player alive wins
	health bar/number on top of each player
	wrapping?

CLASSES:
	GameObject
	Scene 
	StaticObject < GameObject
	MovingObject < GameObject
	Farts < MovingObject
		belongs_to gnome
	Gnome < MovingObject
		has_many bullets
	Game
	GameView

GameObject: all objects in the game
	ivars:sf
		[x,y] pos
		Game game
	methods:
		draw(canvas)

Scene: background scene with static drawn scenery (trees, etc) and interactive scenery (i.e. platforms)
	ivars:
		[array of static objs (only platforms right now)]
	methods:
		draw()

MovingObject:
	ivars:
		[x,y] pos
		int vel
		[x, y] dir
		boolean isWrappable
	methods:
		move()
		draw()
		collidesWith(otherObject)

Farts:
	ivars: 
		super
		gnome id
		strength - represents damage done
	methods:
		super

Gnome:
	ivars:
		super
		health
		lives
		Friction- bringing horiz velocity back towards 0
		ACCGRAV- increasing vert velocity in the neg direction 
	methods:
		handleHit- deals damage and calls respawn if health <= 0 
		respawn- start at ran position and remove one life 
		move- updates pos based on vel and current pos
		jump- increases vel in the ver direction
		run- increases vel in current horiz direction
		fart! 

Game
	ivars:
		gnome1
		gnome2
		Scene
		[GameObject] allObjects
		[xDim, yDim]
		player1, player2
	method:
		addObject(obj);
		step()
			moveEverything() - move all moving objs 
			checkCollisions() - check moving objs + static objs for collisions
			isOver
				winner() - return player	
			drawAll()

GameView:
	ivars:
		canvas
		game
	methods:
		keybinding() - calls run, jump
		setup() - setup initial game state && loops on set interval

time frame for completion of the prototype?


DIVISION OF LABOR:
	Dayna:
		GameObject
		Scene 
		StaticObject < GameObject
		Game
		GameView
		html/canvas

	Bryan:	
		MovingObject < GameObject
		Farts < MovingObject
			belongs_to gnome
	
	Rich:	
		Gnome < MovingObject
			has_many bullets
	